package untrace.test.advidi;

import java.math.RoundingMode;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;
import untrace.test.models.ExternalDataPoint;
import untrace.test.models.InternalClosingPriceModel;
import untrace.test.models.ProcessingModel;

public class CsvReader {
	
	private static final Path path = Paths.get("src/main/resources/F.csv");
	
//	// The string is a composite key "YY", the data is the average for the month
//	private static List<ExternalDataPoint> yearlyData = new ArrayList<ExternalDataPoint>(); 
//	
//	// The string is a composite key "YY-MM", the data is the closing price per day over the whole month
//	private static HashMap<String, List<ExternalDataPoint>> monthlyData = new HashMap<String, List<ExternalDataPoint>>(); 
//
//	// the string is a composite key "YY-MM-DD", the data is the individual days
//	private static HashMap<String, List<ExternalDataPoint>> dailyData = new HashMap<String, List<ExternalDataPoint>>();  
	
	private static List<InternalClosingPriceModel> allData = null;
	
	
	public CsvReader() {
		
		if ( allData == null ) { // TODO: Optimization - could reset this value to null for ram footprint purposes (use other variables for null check)
			extractAllData();
		}
	}
	
	public void extractAllData() {
		
		try {
			allData = new ArrayList<InternalClosingPriceModel>();
		
			for ( String line : Files.lines( path ).
												skip( 1 ).
												collect( Collectors.toList() )){
				
				
				if ( line != null && line.length() > 0 && line.contains(",") ) { // ensure the line is readable and can be split
	
						InternalClosingPriceModel entry = new InternalClosingPriceModel( line.split(",")[0] , line.split(",")[4] ); // column 0 = date, column 4 = closing price 
						allData.add( entry );
					}
				}	
		
		}catch(Exception e) {
			e.printStackTrace(); // TODO: specific exception handling required.
		}
	}
	
	private List<ExternalDataPoint> processDailyData( int year, int month ){
		
		String compositeSearchKey = ""+year+"-"+month;
		
		HashMap<Integer, ProcessingModel> totalsProcessing = new HashMap<Integer, ProcessingModel>(); // hold the totals in memory
		for ( InternalClosingPriceModel lodeadData : allData ) {
			
			if ( lodeadData.getYear() == year && lodeadData.getMonth() == month ) { // find the matching year and month for data extraction
				
 				if ( totalsProcessing.containsKey( lodeadData.getDay()) ) {
 					
 					totalsProcessing.get( lodeadData.getDay() ).addValue( lodeadData.getClosingPrice() ); // update the total
				}
				else { // the month doesn't exist in the map - add it
					
					totalsProcessing.put( lodeadData.getDay(), new ProcessingModel( lodeadData.getClosingPrice() ));
				}
			}
		}
		
		// TODO: DETECT MISSING DAYS AND INJECT ZEROS IF REQUIRED - COLLECTION INTERSECTION EASY
		
		List<ExternalDataPoint> output = new ArrayList<ExternalDataPoint>(); // guarantee an empty collection at worst
		for ( Integer day : totalsProcessing.keySet() ) {
			output.add( new ExternalDataPoint(""+year+"-"+month+"-"+day ,  
						totalsProcessing.get( day ).getAverage().setScale(2, RoundingMode.DOWN ).floatValue() ));
		}
		
		return output;
		
	}
	
	private List<ExternalDataPoint> processMonthlyData( int year ) {
		
		HashMap<Integer, ProcessingModel> totalsProcessing = new HashMap<Integer, ProcessingModel>(); // hold the totals in memory
		for ( InternalClosingPriceModel lodeadData : allData ) {
			
			if ( lodeadData.getYear() == year) { // find the matching year for data extraction
				
 				if ( totalsProcessing.containsKey( lodeadData.getMonth()) ) {
 					
 					totalsProcessing.get( lodeadData.getMonth() ).addValue( lodeadData.getClosingPrice() ); // update the total
				}
				else { // the month doesn't exist in the map - add it
					
					totalsProcessing.put( lodeadData.getMonth(), new ProcessingModel( lodeadData.getClosingPrice() ));
				}
			}
		}
		
		// TODO: DETECT MISSING MONTHS AND INJECT ZEROS IF REQUIRED - COLLECTION INTERSECTION EASY
		
		List<ExternalDataPoint> output = new ArrayList<ExternalDataPoint>(); // guarantee an empty collection at worst
		for ( Integer month : totalsProcessing.keySet() ) {
			output.add( new ExternalDataPoint(""+year+"-"+month ,  
						totalsProcessing.get( month ).getAverage().setScale(2, RoundingMode.DOWN ).floatValue() ));
		}
		
		return output;
	}
	
	private List<ExternalDataPoint> processYearlyData() {
		
		HashMap<Integer, ProcessingModel> totalsProcessing = new HashMap<Integer, ProcessingModel>(); // hold the totals in memory
		for ( InternalClosingPriceModel lodeadData : allData ) {
				
 				if ( totalsProcessing.containsKey( lodeadData.getYear()) ) {
 					
 					totalsProcessing.get( lodeadData.getYear() ).addValue( lodeadData.getClosingPrice() ); // update the total
				}
				else { // the month doesn't exist in the map - add it
					
					totalsProcessing.put( lodeadData.getYear(), new ProcessingModel( lodeadData.getClosingPrice() ));
				}
			}
		
		// TODO: DETECT MISSING YEARS AND INJECT ZEROS IF REQUIRED - COLLECTION INTERSECTION EASY
		
		List<ExternalDataPoint> output = new ArrayList<ExternalDataPoint>(); // guarantee an empty collection at worst
		for ( Integer year : totalsProcessing.keySet() ) {
			output.add( new ExternalDataPoint(""+year+"-" ,  
						totalsProcessing.get( year ).getAverage().setScale(2, RoundingMode.DOWN ).floatValue() ));
		}
		
		return output;
		
	}
}
